// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  type CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  type ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  type SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddCharacter } from "./add_character_reducer.ts";
export { AddCharacter };
import { ClearCharacters } from "./clear_characters_reducer.ts";
export { ClearCharacters };
import { ClearUsers } from "./clear_users_reducer.ts";
export { ClearUsers };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateAndLinkNewRegion } from "./create_and_link_new_region_reducer.ts";
export { CreateAndLinkNewRegion };
import { CreateStarterRegion } from "./create_starter_region_reducer.ts";
export { CreateStarterRegion };
import { LinkRegions } from "./link_regions_reducer.ts";
export { LinkRegions };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { UpdateCharacter } from "./update_character_reducer.ts";
export { UpdateCharacter };

// Import and reexport all table handle types
import { CharacterTableHandle } from "./character_table.ts";
export { CharacterTableHandle };
import { RegionTableHandle } from "./region_table.ts";
export { RegionTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { AddCharacterInput } from "./add_character_input_type.ts";
export { AddCharacterInput };
import { Character } from "./character_type.ts";
export { Character };
import { Region } from "./region_type.ts";
export { Region };
import { UpdateCharacterInput } from "./update_character_input_type.ts";
export { UpdateCharacterInput };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    character: {
      tableName: "character",
      rowType: Character.getTypeScriptAlgebraicType(),
      primaryKey: "characterId",
    },
    region: {
      tableName: "region",
      rowType: Region.getTypeScriptAlgebraicType(),
      primaryKey: "regionId",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "userId",
    },
  },
  reducers: {
    AddCharacter: {
      reducerName: "AddCharacter",
      argsType: AddCharacter.getTypeScriptAlgebraicType(),
    },
    ClearCharacters: {
      reducerName: "ClearCharacters",
      argsType: ClearCharacters.getTypeScriptAlgebraicType(),
    },
    ClearUsers: {
      reducerName: "ClearUsers",
      argsType: ClearUsers.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CreateAndLinkNewRegion: {
      reducerName: "CreateAndLinkNewRegion",
      argsType: CreateAndLinkNewRegion.getTypeScriptAlgebraicType(),
    },
    CreateStarterRegion: {
      reducerName: "CreateStarterRegion",
      argsType: CreateStarterRegion.getTypeScriptAlgebraicType(),
    },
    LinkRegions: {
      reducerName: "LinkRegions",
      argsType: LinkRegions.getTypeScriptAlgebraicType(),
    },
    SetName: {
      reducerName: "SetName",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    UpdateCharacter: {
      reducerName: "UpdateCharacter",
      argsType: UpdateCharacter.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddCharacter", args: AddCharacter }
| { name: "ClearCharacters", args: ClearCharacters }
| { name: "ClearUsers", args: ClearUsers }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateAndLinkNewRegion", args: CreateAndLinkNewRegion }
| { name: "CreateStarterRegion", args: CreateStarterRegion }
| { name: "LinkRegions", args: LinkRegions }
| { name: "SetName", args: SetName }
| { name: "UpdateCharacter", args: UpdateCharacter }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addCharacter(inputCharacter: AddCharacterInput) {
    const __args = { inputCharacter };
    let __writer = new BinaryWriter(1024);
    AddCharacter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddCharacter", __argsBuffer, this.setCallReducerFlags.addCharacterFlags);
  }

  onAddCharacter(callback: (ctx: ReducerEventContext, inputCharacter: AddCharacterInput) => void) {
    this.connection.onReducer("AddCharacter", callback);
  }

  removeOnAddCharacter(callback: (ctx: ReducerEventContext, inputCharacter: AddCharacterInput) => void) {
    this.connection.offReducer("AddCharacter", callback);
  }

  clearCharacters() {
    this.connection.callReducer("ClearCharacters", new Uint8Array(0), this.setCallReducerFlags.clearCharactersFlags);
  }

  onClearCharacters(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClearCharacters", callback);
  }

  removeOnClearCharacters(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClearCharacters", callback);
  }

  clearUsers() {
    this.connection.callReducer("ClearUsers", new Uint8Array(0), this.setCallReducerFlags.clearUsersFlags);
  }

  onClearUsers(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClearUsers", callback);
  }

  removeOnClearUsers(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClearUsers", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  createAndLinkNewRegion(fromRegionId: string, name: string, description: string, fullDescription: string, climate: string, culture: string, tier: number, travelEnergyCost: number, resources: string[]) {
    const __args = { fromRegionId, name, description, fullDescription, climate, culture, tier, travelEnergyCost, resources };
    let __writer = new BinaryWriter(1024);
    CreateAndLinkNewRegion.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateAndLinkNewRegion", __argsBuffer, this.setCallReducerFlags.createAndLinkNewRegionFlags);
  }

  onCreateAndLinkNewRegion(callback: (ctx: ReducerEventContext, fromRegionId: string, name: string, description: string, fullDescription: string, climate: string, culture: string, tier: number, travelEnergyCost: number, resources: string[]) => void) {
    this.connection.onReducer("CreateAndLinkNewRegion", callback);
  }

  removeOnCreateAndLinkNewRegion(callback: (ctx: ReducerEventContext, fromRegionId: string, name: string, description: string, fullDescription: string, climate: string, culture: string, tier: number, travelEnergyCost: number, resources: string[]) => void) {
    this.connection.offReducer("CreateAndLinkNewRegion", callback);
  }

  createStarterRegion(name: string, description: string, fullDescription: string, climate: string, culture: string, resources: string[]) {
    const __args = { name, description, fullDescription, climate, culture, resources };
    let __writer = new BinaryWriter(1024);
    CreateStarterRegion.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateStarterRegion", __argsBuffer, this.setCallReducerFlags.createStarterRegionFlags);
  }

  onCreateStarterRegion(callback: (ctx: ReducerEventContext, name: string, description: string, fullDescription: string, climate: string, culture: string, resources: string[]) => void) {
    this.connection.onReducer("CreateStarterRegion", callback);
  }

  removeOnCreateStarterRegion(callback: (ctx: ReducerEventContext, name: string, description: string, fullDescription: string, climate: string, culture: string, resources: string[]) => void) {
    this.connection.offReducer("CreateStarterRegion", callback);
  }

  linkRegions(regionAId: string, regionBId: string) {
    const __args = { regionAId, regionBId };
    let __writer = new BinaryWriter(1024);
    LinkRegions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("LinkRegions", __argsBuffer, this.setCallReducerFlags.linkRegionsFlags);
  }

  onLinkRegions(callback: (ctx: ReducerEventContext, regionAId: string, regionBId: string) => void) {
    this.connection.onReducer("LinkRegions", callback);
  }

  removeOnLinkRegions(callback: (ctx: ReducerEventContext, regionAId: string, regionBId: string) => void) {
    this.connection.offReducer("LinkRegions", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetName", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("SetName", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("SetName", callback);
  }

  updateCharacter(input: UpdateCharacterInput) {
    const __args = { input };
    let __writer = new BinaryWriter(1024);
    UpdateCharacter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateCharacter", __argsBuffer, this.setCallReducerFlags.updateCharacterFlags);
  }

  onUpdateCharacter(callback: (ctx: ReducerEventContext, input: UpdateCharacterInput) => void) {
    this.connection.onReducer("UpdateCharacter", callback);
  }

  removeOnUpdateCharacter(callback: (ctx: ReducerEventContext, input: UpdateCharacterInput) => void) {
    this.connection.offReducer("UpdateCharacter", callback);
  }

}

export class SetReducerFlags {
  addCharacterFlags: CallReducerFlags = 'FullUpdate';
  addCharacter(flags: CallReducerFlags) {
    this.addCharacterFlags = flags;
  }

  clearCharactersFlags: CallReducerFlags = 'FullUpdate';
  clearCharacters(flags: CallReducerFlags) {
    this.clearCharactersFlags = flags;
  }

  clearUsersFlags: CallReducerFlags = 'FullUpdate';
  clearUsers(flags: CallReducerFlags) {
    this.clearUsersFlags = flags;
  }

  createAndLinkNewRegionFlags: CallReducerFlags = 'FullUpdate';
  createAndLinkNewRegion(flags: CallReducerFlags) {
    this.createAndLinkNewRegionFlags = flags;
  }

  createStarterRegionFlags: CallReducerFlags = 'FullUpdate';
  createStarterRegion(flags: CallReducerFlags) {
    this.createStarterRegionFlags = flags;
  }

  linkRegionsFlags: CallReducerFlags = 'FullUpdate';
  linkRegions(flags: CallReducerFlags) {
    this.linkRegionsFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  updateCharacterFlags: CallReducerFlags = 'FullUpdate';
  updateCharacter(flags: CallReducerFlags) {
    this.updateCharacterFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get character(): CharacterTableHandle {
    return new CharacterTableHandle(this.connection.clientCache.getOrCreateTable<Character>(REMOTE_MODULE.tables.character));
  }

  get region(): RegionTableHandle {
    return new RegionTableHandle(this.connection.clientCache.getOrCreateTable<Region>(REMOTE_MODULE.tables.region));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
